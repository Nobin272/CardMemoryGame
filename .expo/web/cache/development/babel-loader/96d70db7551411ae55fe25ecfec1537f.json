{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _CardsRow = _interopRequireDefault(require(\"./components/CardsRow\"));\n\nvar _styles = _interopRequireDefault(require(\"../styles/styles\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/nobinthomas/Desktop/nobinCardGame/src/CardGameApp.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CARD_COUNT = 12;\nvar NO_CARD_ROW = 3;\n\nrandomArray = function randomArray(array) {\n  for (var index = array.length - 1; index > 0; index--) {\n    var savedIndex = Math.floor(Math.random() * (index + 1));\n    var _ref = [array[savedIndex], array[index]];\n    array[index] = _ref[0];\n    array[savedIndex] = _ref[1];\n  }\n\n  return array;\n};\n\nrandomNumbers = function randomNumbers() {\n  var nums = new Set();\n\n  while (nums.size !== CARD_COUNT / 2) {\n    nums.add(Math.floor(Math.random() * 98) + 1);\n  }\n\n  var cloneNums = (0, _toConsumableArray2.default)(nums);\n  var numberArray = cloneNums.concat((0, _toConsumableArray2.default)(nums));\n  console.log(\"Random array is: \" + numberArray);\n  return numberArray;\n};\n\ngenerateCards = function generateCards() {\n  var index = 0;\n  var random = randomArray(randomNumbers());\n  var cards = [].slice.call(random).map(function (number) {\n    return {\n      id: ++index,\n      indexKey: index % NO_CARD_ROW,\n      number: number,\n      isFlipped: false,\n      canFlip: true\n    };\n  });\n  console.log(\"Cards array is: \" + (0, _toConsumableArray2.default)(cards));\n  return randomArray(cards);\n};\n\nvar CardGameApp = function CardGameApp() {\n  var _useState = (0, _react.useState)(generateCards()),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      cards = _useState2[0],\n      setCards = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      canFlip = _useState4[0],\n      setCanFlip = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(null),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      firstCard = _useState6[0],\n      setFirstCard = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(null),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      secondCard = _useState8[0],\n      setSecondCard = _useState8[1];\n\n  function setCardIsFlipped(cardID, isFlipped) {\n    setCards(function (prev) {\n      return prev.map(function (c) {\n        if (c.id !== cardID) return c;\n        return (0, _extends2.default)({}, c, {\n          isFlipped: isFlipped\n        });\n      });\n    });\n  }\n\n  function setCardCanFlip(cardID, canFlip) {\n    setCards(function (prev) {\n      return prev.map(function (c) {\n        if (c.id !== cardID) return c;\n        return (0, _extends2.default)({}, c, {\n          canFlip: canFlip\n        });\n      });\n    });\n  }\n\n  (0, _react.useEffect)(function () {\n    setTimeout(function () {\n      var index = 0;\n\n      var _loop = function _loop(card) {\n        setTimeout(function () {\n          return setCardIsFlipped(card.id, true);\n        }, index++ * 100);\n      };\n\n      for (var _iterator = _createForOfIteratorHelperLoose(cards), _step; !(_step = _iterator()).done;) {\n        var card = _step.value;\n\n        _loop(card);\n      }\n\n      setTimeout(function () {\n        return setCanFlip(true);\n      }, cards.length * 100);\n    }, 3000);\n  }, []);\n\n  function resetFirstAndSecondCards() {\n    setFirstCard(null);\n    setSecondCard(null);\n  }\n\n  function onSuccessGuess() {\n    setCardCanFlip(firstCard.id, false);\n    setCardCanFlip(secondCard.id, false);\n    setCardIsFlipped(firstCard.id, false);\n    setCardIsFlipped(secondCard.id, false);\n    resetFirstAndSecondCards();\n  }\n\n  function onFailureGuess() {\n    var firstCardID = firstCard.id;\n    var secondCardID = secondCard.id;\n    setTimeout(function () {\n      setCardIsFlipped(firstCardID, true);\n    }, 1000);\n    setTimeout(function () {\n      setCardIsFlipped(secondCardID, true);\n    }, 1200);\n    resetFirstAndSecondCards();\n  }\n\n  (0, _react.useEffect)(function () {\n    if (!firstCard || !secondCard) return;\n    firstCard.number === secondCard.number ? onSuccessGuess() : onFailureGuess();\n  }, [firstCard, secondCard]);\n\n  function onCardClick(card) {\n    if (!canFlip) return;\n    if (!card.canFlip) return;\n    if (firstCard && card.id === firstCard.id || secondCard && card.id === secondCard.id) return;\n    setCardIsFlipped(card.id, false);\n    firstCard ? setSecondCard(card) : setFirstCard(card);\n  }\n\n  var groupBy = cards.reduce(function (grouped, card) {\n    if (!grouped[card.indexKey]) grouped[card.indexKey] = [];\n    grouped[card.indexKey].push(card);\n    return grouped;\n  }, {});\n\n  var renderCardData = function renderCardData() {\n    return Object.entries(groupBy).map(function (_ref2) {\n      var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n\n      console.log(\"Grouped cards: \" + key + \", \" + value.length);\n\n      _react.default.createElement(_CardsRow.default, {\n        onClick: function onClick() {\n          return onCardClick(cardItems);\n        },\n        cards: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: _styles.default.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: {\n      flexDirection: 'row',\n      backgroundColor: \"grey\",\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, renderCardData()));\n};\n\nvar _default = CardGameApp;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nobinthomas/Desktop/nobinCardGame/src/CardGameApp.js"],"names":["CARD_COUNT","NO_CARD_ROW","randomArray","array","index","length","savedIndex","Math","floor","random","randomNumbers","nums","Set","size","add","cloneNums","numberArray","concat","console","log","generateCards","cards","slice","call","map","number","id","indexKey","isFlipped","canFlip","CardGameApp","setCards","setCanFlip","firstCard","setFirstCard","secondCard","setSecondCard","setCardIsFlipped","cardID","prev","c","setCardCanFlip","setTimeout","card","resetFirstAndSecondCards","onSuccessGuess","onFailureGuess","firstCardID","secondCardID","onCardClick","groupBy","reduce","grouped","push","renderCardData","Object","entries","key","value","cardItems","styles","container","flexDirection","backgroundColor","flex"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, Component} from \"react\";\nimport { View, TouchableOpacityComponent, SafeAreaViewComponent } from \"react-native\";\nimport CardsRow from './components/CardsRow';\nimport styles from \"../styles/styles\";\n\nconst CARD_COUNT = 12\nconst NO_CARD_ROW = 3\n\n/** \n * This function will used to generate a random Array\n**/\nrandomArray = (array) => {\n    // Shuffle array item and swap the elements\n    for (let index = array.length - 1; index > 0; index--) {\n        const savedIndex = Math.floor(Math.random() * (index + 1));\n        [array[index], array[savedIndex]] = [array[savedIndex], array[index]];\n    }\n    return array;\n}\n\n/** \n * This function will generate random numbers between 0 and 6\n**/\nrandomNumbers = () => {\n    const nums = new Set();\n    // Only need to generate 6 unique random numbers between 1 and 100\n    while(nums.size !== CARD_COUNT/2) {\n        nums.add(Math.floor(Math.random() * 98) + 1);\n    }\n    // Duplicate and generate 12 digit arrays\n    const cloneNums = [...nums];\n    const numberArray = cloneNums.concat([...nums])\n    console.log(\"Random array is: \" + numberArray);\n    return numberArray \n}\n\ngenerateCards = () => {\n    var index = 0\n    // Generate the cards and duplicate items\n    const random = randomArray(randomNumbers())\n\tconst cards = [].slice.call(random).map(number => ({\n            id: ++index,\n            indexKey: index % NO_CARD_ROW,\n\t\t\tnumber: number,\n\t\t\tisFlipped: false,\n\t\t\tcanFlip: true\n        }));\n    console.log(\"Cards array is: \" + [...cards]);\n\treturn randomArray(cards);\n}\n\nconst CardGameApp = () => {\n    const [cards, setCards] = useState(generateCards());\n\tconst [canFlip, setCanFlip] = useState(false);\n\tconst [firstCard, setFirstCard] = useState(null);\n\tconst [secondCard, setSecondCard] = useState(null);\n\n\tfunction setCardIsFlipped(cardID, isFlipped) {\n\t\tsetCards(prev => prev.map(c => {\n\t\t\tif (c.id !== cardID)\n\t\t\t\treturn c;\n\t\t\treturn {...c, isFlipped};\n\t\t}));\n\t}\n\tfunction setCardCanFlip(cardID, canFlip) {\n\t\tsetCards(prev => prev.map(c => {\n\t\t\tif (c.id !== cardID)\n\t\t\t\treturn c;\n\t\t\treturn {...c, canFlip};\n\t\t}));\n\t}\n\n\t// showcase\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n\t\t\tlet index = 0;\n\t\t\tfor (const card of cards) {\n\t\t\t\tsetTimeout(() => setCardIsFlipped(card.id, true), index++ * 100);\n\t\t\t}\n\t\t\tsetTimeout(() => setCanFlip(true), cards.length * 100);\n\t\t}, 3000);\n\t}, []);\n\n\n\tfunction resetFirstAndSecondCards() {\n\t\tsetFirstCard(null);\n\t\tsetSecondCard(null);\n\t}\n\n\tfunction onSuccessGuess() {\n\t\tsetCardCanFlip(firstCard.id, false);\n\t\tsetCardCanFlip(secondCard.id, false);\n\t\tsetCardIsFlipped(firstCard.id, false);\n\t\tsetCardIsFlipped(secondCard.id, false);\n\t\tresetFirstAndSecondCards();\n\t}\n\tfunction onFailureGuess() {\n\t\tconst firstCardID = firstCard.id;\n\t\tconst secondCardID = secondCard.id;\n\n\t\tsetTimeout(() => {\n\t\t\tsetCardIsFlipped(firstCardID, true);\n\t\t}, 1000);\n\t\tsetTimeout(() => {\n\t\t\tsetCardIsFlipped(secondCardID, true);\n\t\t}, 1200);\n\n\t\tresetFirstAndSecondCards();\n\t}\n\n\tuseEffect(() => {\n\t\tif (!firstCard || !secondCard)\n\t\t\treturn;\n\t\t(firstCard.number === secondCard.number) ? onSuccessGuess() : onFailureGuess();\n\t}, [firstCard, secondCard]);\n\n\n\tfunction onCardClick(card) {\n\t\tif (!canFlip)\n\t\t\treturn;\n\t\tif (!card.canFlip)\n\t\t\treturn;\n\n\t\tif ((firstCard && (card.id === firstCard.id) || (secondCard && (card.id === secondCard.id))))\n\t\t\treturn;\n\n\t\tsetCardIsFlipped(card.id, false);\n\n\t\t(firstCard) ? setSecondCard(card) : setFirstCard(card);\n    }\n\n    // Utility function to group cards into Rows\n    const groupBy = cards.reduce((grouped, card) => {\n        if (!grouped[card.indexKey]) grouped[card.indexKey] = [];\n        grouped[card.indexKey].push(card);\n        return grouped;\n    }, {});\n    \n    const renderCardData = () => {\n        return Object.entries(groupBy).map(([key, value]) => {\n            console.log(\"Grouped cards: \" + key + \", \" + value.length);\n            <CardsRow onClick={() => onCardClick(cardItems)} cards={ value }/>\n        });\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style = {{\n            flexDirection: 'row',\n            backgroundColor: \"grey\", flex: 1}}>\n                {renderCardData()}\n            </View>\n        </View>\n    );\n}\nexport default CardGameApp;\n"]},"metadata":{},"sourceType":"script"}